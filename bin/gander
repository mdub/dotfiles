#! /usr/bin/env ruby
# frozen_string_literal: true

Gem.paths = { "GEM_HOME" => Gem.user_dir }

require "bundler/inline"

gemfile do
  source "https://rubygems.org"
  gem "actionview", require: "action_view"
  gem "clamp"
  gem "dry-struct"
  gem "file-tail"
  gem "json"
  gem "rouge"
  gem "yaml"
end

module Types
  include Dry.Types()
end

class SessionEntry < Dry::Struct
  attribute :id, Types::String
  attribute :path, Types::String
  attribute :modified, Types::JSON::DateTime
end

Clamp do

  self.description = "Watch Goose sessions"

  option "--debug", :flag, "Enable debug output"

  include ActionView::Helpers::DateHelper

  subcommand "list", "List Goose sessions" do
    def execute
      goose_sessions.each do |session|
        puts "#{session.id} (modified #{time_ago_in_words(session.modified)} ago)"
      end
    end
  end

  subcommand %w[watch tail], "Watch a session" do

    option %w(-C --[no-]colorize), :flag, "Colorize output"

    parameter "[SESSION_ID]", "ID of the session to watch", default: "latest"

    def execute
      File::Tail::Logfile.open(session_path) do |io|
        io.reopen_suspicious = false
        line_number = 0
        io.forward.tail do |line|
          line_number += 1
          puts "DEBUG: INPUT[#{line_number}] = #{line.inspect}" if debug?
          begin
            print_session_entry(JSON.parse(line))
          rescue JSON::ParserError => e
            warn "WARN: Failed to parse JSON: #{e.message}"
          end
        end
      end
    end

    def print_session_entry(data)
      yaml = YAML.dump(data)
      yaml = colorize_yaml(yaml) if colorize?
      puts yaml
    end

    def session_path
      return goose_sessions.first.path if session_id == "latest"

      goose_sessions.each do |session|
        return session.path if session.id == session_id
      end
      signal_error "Session with ID '#{session_id}' not found."
    end

    def colorize_yaml(yaml)
      @formatter ||= Rouge::Formatters::Terminal256.new
      @lexer ||= Rouge::Lexers::YAML.new
      @formatter.format(@lexer.lex(yaml))
    end

    def default_colorize?
      $stdout.tty?
    end

  end

  def goose_sessions
    @goose_sessions ||= begin
      json = `goose session list --format json`
      JSON.parse(json, symbolize_names: true).map { |data| SessionEntry.new(data) }
    end
  end

end
