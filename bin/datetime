#! /usr/bin/env ruby

require 'chronic' rescue LoadError
require 'clamp'
require 'time'

Clamp do

  option %w(-U --utc --gmt), :flag, "convert to UTC"

  option %w(-L --local), :flag, "convert to local time"

  option %w(-f --format), "FORMAT", "output format", default: "iso8601"

  parameter "[TIME]", "date/time string" do |arg|
    parse_time(arg)
  end

  def execute
    ts = time || Time.now
    puts format_time(convert(ts))
  end

  private

  def parse_time(arg)
    case arg
    when /^\d{10}$/
      Time.at(Integer(arg))
    when /^\d{13}$/
      Time.at(Float(arg) / 1000)
    else
      parse_time_string(arg)
    end
  end

  if defined?(Chronic)

    def parse_time_string(arg)
      Chronic.parse(arg).tap do |t|
        raise ArgumentError, "invalid format: #{arg.inspect}" if t.nil?
      end
    end

  else

    def parse_time_string(arg)
      Time.parse(arg)
    end

  end

  def convert(ts)
    return ts.utc if utc?
    return ts.localtime if local?
    ts
  end

  def format_time_as_s(ts)
    ts.to_i
  end

  def format_time_as_ms(ts)
    (ts.to_f * 1000).to_i
  end

  def format_time(ts)
    if ts.respond_to?(format)
      return ts.public_send(format)
    end
    if respond_to?("format_time_as_#{format}", true)
      return send("format_time_as_#{format}", ts)
    end
    signal_usage_error "unrecognised format: #{format}"
  end

end
