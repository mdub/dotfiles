#! /usr/bin/env ruby

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'clamp'
end

Clamp do

  def git_url
    `git config --get remote.origin.url`.chomp.tap do 
      signal_error "cannot determine Git URL" unless $?.success?
    end
  end

  def git_host_and_path(git_url)
    case git_url 
    when %r{^https://([\w.]+)/(.*?)(.git)?$}
      [$1, $2]
    when %r{^(?:ssh://)?[\w-]+@([\w.]+)[/:](.*?)(.git)?$}
      [$1, $2]
    else
      signal_error "unrecognised Git URL: #{git_url}"
    end
  end

  def git_branch
    `git rev-parse --abbrev-ref HEAD`.chomp
  end

  def git_prefix
    ENV.fetch("GIT_PREFIX") { `git rev-parse --show-prefix`.chomp }
  end

  def git_web_url(git_url, branch:, prefix: "")
    host, path = git_host_and_path(git_url)
    case host
    when "git.sqcorp.co"
      project, repo = path.split("/",2)
      "https://#{host}/projects/#{project}/repos/#{repo}/browse/#{prefix}?at=refs/heads/#{branch}"
    else
      "https://#{host}/#{path}/tree/#{branch}/#{prefix}"
    end
  end

  self.default_subcommand = "show"

  subcommand "show", "puts Web UI URL" do

    def execute
      puts git_web_url(
        git_url,
        branch: git_branch,
        prefix: git_prefix
      )
    end

  end

  subcommand "selftest", "run self-tests" do

    def execute
      assert_git_web_url(
        git_url: "https://github.com/mdub/clamp.git", branch: "master",
        is: "https://github.com/mdub/clamp/tree/master/"
      )
      assert_git_web_url(
        git_url: "org-12345678@github.com:apple/orange.git", branch: "master",
        is: "https://github.com/apple/orange/tree/master/"
      )
      assert_git_web_url(
        git_url: "ssh://git@git.sqcorp.co/cash/franklin.git", branch: "master",
        is: "https://git.sqcorp.co/projects/cash/repos/franklin/browse/?at=refs/heads/master"
      )
      assert_git_web_url(
        git_url: "git@git.sqcorp.co/cash/franklin.git", branch: "master",
        is: "https://git.sqcorp.co/projects/cash/repos/franklin/browse/?at=refs/heads/master"
      )
    end

    def assert_git_web_url(git_url:, is:, branch: "master")
      expected = is
      actual = git_web_url(git_url, branch: branch)
      unless actual == expected
        signal_error "expected: #{expected}\n        but got: #{actual}"
      end
    end

  end

end
