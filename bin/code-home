#! /usr/bin/env ruby

require 'clamp'
require 'fileutils'
require 'find'

Clamp do

  subcommand "for", "Print logical home for a code-base" do

    parameter "URL", "Git origin URL", :attribute_name => :origin_url

    def execute
      puts logical_place_for(origin_url)
    end

  end

  subcommand "get", "Checkout code in a logical place" do

    parameter "URL", "Git origin URL", :attribute_name => :origin_url

    def execute
      target = logical_place_for(origin_url)
      FileUtils.mkdir_p(File.dirname(target))
      if File.exist?(target)
        signal_error "Target already exists: #{target.inspect}"
      end
      exec "git clone #{origin_url} #{target}"
    end

  end

  subcommand "list", "List checked-out repos" do

    def execute
      Find.find(code_home) do |path|
        if FileTest.directory?(path) && File.basename(path) == ".git"
          puts origin_url_of(File.dirname(path))
          Find.prune
        else
          next
        end
      end
    end

  end

  subcommand "move", "Move directory to a logical place" do

    parameter "DIR", "project directory"

    def execute
      source = full_dir
      target = logical_place_for(origin_url_of(dir))
      if source == target
        puts "No need to move #{source.inspect}"
        return
      end
      if File.exist?(target)
        signal_error "Target already exists: #{target.inspect}"
      end
      puts "Moving #{source} to #{target}"
      FileUtils.mkdir_p(File.dirname(target))
      FileUtils.mv(source, target)
    end

    private

    def full_dir
      File.expand_path(dir)
    end

  end

  private

  def code_home
    File.expand_path(ENV.fetch("CODE_HOME", "~/Code"))
  end

  def origin_url_of(dir)
    Dir.chdir(dir) do
      url = `git config remote.origin.url`
      unless $?.success?
        signal_error "no Git repository found in #{dir.inspect}"
      end
      url
    end
  end

  def logical_place_for(origin_url)
    case origin_url
    when %r{^git@([^/]+):(.+).git$}
      File.join(code_home, $1, $2)
    when %r{^[a-z]+://(?:[^/]+@)?([^/]+)/(.+?)(?:\.git)?$}
      File.join(code_home, $1, $2)
    else
      signal_error "cannot parse Git remote: #{origin_url.inspect}"
    end
  end

end
